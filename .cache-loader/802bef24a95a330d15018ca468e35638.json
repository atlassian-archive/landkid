{"remainingRequest":"/Users/lbatchelor/src/landkid/node_modules/ts-loader/index.js??ref--4-1!/Users/lbatchelor/src/landkid/src/static/bitbucket/index.ts","dependencies":[{"path":"/Users/lbatchelor/src/landkid/src/static/bitbucket/index.ts","mtime":1542169169515},{"path":"/Users/lbatchelor/src/landkid/node_modules/cache-loader/dist/cjs.js","mtime":1542164158615},{"path":"/Users/lbatchelor/src/landkid/node_modules/ts-loader/index.js","mtime":1542164158621}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire('unfetch/polyfill');\nconst queryString = require('qs');\nconst endpoint = window.location.origin;\nfunction createBtn(btnText, appearance, onClickFn) {\n    return `<button type=\"button\" class=\"ak-button ak-button__appearance-${appearance}\" onClick=\"${onClickFn}()\">\n    ${btnText}\n  </button>`;\n}\nconst landButtonView = (settings) => {\n    const landWhenAbleButton = settings.allowLandWhenAble\n        ? createBtn('Land when able', 'default', 'landWhenAbleClicked')\n        : '';\n    return `<div>\n    <p>This PR is not queued for Landing yet, click \"Land\" below or <a href=\"/index.html\" target=\"_blank\">here</a> for more information</p>\n    <br>\n    ${createBtn('Land!', 'primary', 'wantToMergeClicked')}\n    <span style=\"width: 10px; display: inline-block\"></span>\n    ${landWhenAbleButton}\n  </div>`;\n};\nconst isQueuedView = () => {\n    return `<div>\n    <p>This PR is queued for release now. See <a href=\"/current-state/index.html\" target=\"_blank\">here</a> to see the current queue</p>\n    <p>\n      <button type=\"button\" class=\"ak-button ak-button__appearance-default\" onClick=\"cancelButtonClicked()\">\n        Cancel release\n      </button>\n    </p>\n  </div>`;\n};\nconst cancellingView = () => {\n    return `<div>\n    <p>Cancelling...</p>\n  </div>`;\n};\nconst checkingPullRequestView = () => {\n    return `<div>\n    <p>Checking pull request...</p>\n  </div>`;\n};\nconst pausedView = () => {\n    return `<div>\n    <p>Land builds are currently paused:</p>\n    <p id=\"pausedReason\"></p>\n    <p>Please try again later.</p>\n  </div>`;\n};\nconst willLandWhenAbleView = () => {\n    return `<div>\n    <p>Excellent!</p>\n    <p>Your pull request has been queued to land once it is able</p>\n  </div>`;\n};\n// TODO: There are more detailed messages we could give here now\nconst notAllowedToLand = (reasons) => {\n    const isOpen = reasons.isOpen;\n    const isApproved = reasons.isApproved;\n    const isGreen = reasons.isGreen;\n    const allTasksClosed = reasons.allTasksClosed;\n    if (!isOpen) {\n        return `<div><p>PR is already closed!</p></div>`;\n    }\n    if (!isApproved) {\n        return `<div><p>Pull request needs to be approved</p></div>`;\n    }\n    if (!isGreen) {\n        return `<div><p>Pull Request needs a green build</p></div>`;\n    }\n    if (!allTasksClosed) {\n        return `<div><p>Pull Request needs all tasks completed (you might need to open and re-close them!)</p></div>`;\n    }\n    console.error(reasons);\n    return `<div>\n    <p>Error finding reason, please check console</p>\n  </div>`;\n};\nconst errorCreatingLandRequestView = (err) => {\n    console.error(err);\n    const reason = err.reason || \"We honestly don't know... See error console\";\n    return `<div>\n    <p>There was an error whilst queueing your land request:</p>\n    <p style=\"color: red\">${reason}</p>\n  </div>`;\n};\nfunction getCurrentStateAndSettings() {\n    return fetch(`${endpoint}/api/current-state`)\n        .then(resp => resp.json())\n        .then(state => fetch(`${endpoint}/api/settings`)\n        .then(resp => resp.json())\n        .then(settings => ({\n        settings,\n        state,\n    })))\n        .catch(err => console.error('error ', err));\n}\n// Fetches the user, repo and id vars\nfunction getQueryStringVars() {\n    const qs = window.location.search.substring(1);\n    return queryString.parse(qs);\n}\nfunction wantToMergeClicked() {\n    setView(checkingPullRequestView());\n    const qs = getQueryStringVars();\n    fetch(`${endpoint}/api/is-allowed-to-land/${qs.pullRequestId}`)\n        .then(resp => resp.json())\n        .then(data => {\n        if (data.isAllowedToLand.isAllowed) {\n            return landPullRequest();\n        }\n        else {\n            setView(notAllowedToLand(data.isAllowedToLand));\n        }\n    })\n        .catch(err => {\n        setView(errorCreatingLandRequestView(err));\n    });\n}\nfunction landWhenAbleClicked() {\n    setView(checkingPullRequestView());\n    landPullRequest({\n        whenAbleFlag: true,\n    });\n}\n// reusing this function for actual landrequests and for land when able requests\n// THIS IS TERRIBLE - FIX ASAP\nfunction landPullRequest(opts = {}) {\n    const whenAbleFlag = opts.whenAbleFlag;\n    const qs = getQueryStringVars();\n    const qsString = queryString.stringify({\n        username: qs.username,\n        userUuid: qs.userUuid,\n        commit: qs.commit,\n        title: qs.title,\n    });\n    const endPointVerb = whenAbleFlag ? 'land-when-able' : 'land-pr';\n    // TODO: send actual post data, not a query string...\n    return fetch(`${endpoint}/api/${endPointVerb}/${qs.pullRequestId}?${qsString}`, {\n        method: 'POST',\n    })\n        .then(resp => resp.json())\n        .then(() => {\n        if (whenAbleFlag) {\n            setView(willLandWhenAbleView());\n            return;\n        }\n        setView(isQueuedView());\n    })\n        .catch(err => {\n        setView(errorCreatingLandRequestView(err));\n    });\n}\nfunction cancelButtonClicked() {\n    setView(cancellingView());\n    const qs = getQueryStringVars();\n    const qsString = queryString.stringify({\n        username: qs.username,\n        userUuid: qs.userUuid,\n    });\n    return fetch(`${endpoint}/api/cancel-pr/${qs.pullRequestId}?${qsString}`, {\n        method: 'POST',\n    })\n        .then(() => getCurrentStateAndSettings())\n        .then(stateAndSettings => {\n        if (!stateAndSettings)\n            throw new Error('Failed to fetch settings');\n        setView(landButtonView(stateAndSettings.settings));\n    })\n        .catch(err => {\n        setView(errorCreatingLandRequestView(err));\n    });\n}\nfunction displayQueueOrLandButton(queue, running, settings) {\n    const queryStringVars = getQueryStringVars();\n    const pullRequestId = queryStringVars.pullRequestId;\n    const isQueuedOrRunning = queue.some(pr => pr.pullRequestId === pullRequestId) ||\n        running.pullRequestId === pullRequestId;\n    console.log('Current queue: ', queue);\n    if (isQueuedOrRunning) {\n        setView(isQueuedView());\n    }\n    else {\n        setView(landButtonView(settings));\n    }\n}\nconst qs = getQueryStringVars();\nif (qs.state === 'OPEN') {\n    getCurrentStateAndSettings().then(resp => {\n        if (!resp)\n            return;\n        const { settings, state } = resp;\n        const allowedToMerge = settings.usersAllowedToMerge;\n        const paused = state.paused;\n        const pausedReason = state.pausedReason || 'Builds have been paused manually';\n        if (paused) {\n            setView(pausedView());\n            // this is a bit messy, but we don't want to render \"user\" generated content as DOM, so we\n            // have to separately render the text content for the reason\n            document.querySelector('#pausedReason').textContent = pausedReason;\n        }\n        else if (allowedToMerge.indexOf(qs.username) > -1) {\n            displayQueueOrLandButton(state.queue, state.running, settings);\n        }\n    });\n}\nelse {\n    setView(notAllowedToLand({\n        isOpen: false,\n    }));\n}\n// Wrapper function so that all the other HTML can all be wraped in this\nfunction setView(innerHtml) {\n    document.body.innerHTML = `<div class=\"releaseQueueView\">\n    ${innerHtml}\n  </div>`;\n}\n// I've had to just add this hack as the functions declared here aren't available globally anymore\n// I havent added the rest of the events since we're about to replace it, just FYI\nwindow.wantToMergeClicked = wantToMergeClicked;\nwindow.landWhenAbleClicked = landWhenAbleClicked;\nwindow.cancelButtonClicked = cancelButtonClicked;\n",{"version":3,"file":"/Users/lbatchelor/src/landkid/src/static/bitbucket/index.ts","sourceRoot":"","sources":["/Users/lbatchelor/src/landkid/src/static/bitbucket/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { LandRequest } from '../../types';\n\nrequire('unfetch/polyfill');\nconst queryString = require('qs');\n\nconst endpoint = window.location.origin;\n\nfunction createBtn(btnText: string, appearance: string, onClickFn: string) {\n  return `<button type=\"button\" class=\"ak-button ak-button__appearance-${\n    appearance\n  }\" onClick=\"${onClickFn}()\">\n    ${btnText}\n  </button>`;\n}\n\ninterface LandSettings {\n  allowLandWhenAble: boolean;\n  usersAllowedToMerge: Array<string>;\n}\n\nconst landButtonView = (settings: LandSettings) => {\n  const landWhenAbleButton = settings.allowLandWhenAble\n    ? createBtn('Land when able', 'default', 'landWhenAbleClicked')\n    : '';\n  return `<div>\n    <p>This PR is not queued for Landing yet, click \"Land\" below or <a href=\"/index.html\" target=\"_blank\">here</a> for more information</p>\n    <br>\n    ${createBtn('Land!', 'primary', 'wantToMergeClicked')}\n    <span style=\"width: 10px; display: inline-block\"></span>\n    ${landWhenAbleButton}\n  </div>`;\n};\n\nconst isQueuedView = () => {\n  return `<div>\n    <p>This PR is queued for release now. See <a href=\"/current-state/index.html\" target=\"_blank\">here</a> to see the current queue</p>\n    <p>\n      <button type=\"button\" class=\"ak-button ak-button__appearance-default\" onClick=\"cancelButtonClicked()\">\n        Cancel release\n      </button>\n    </p>\n  </div>`;\n};\n\nconst cancellingView = () => {\n  return `<div>\n    <p>Cancelling...</p>\n  </div>`;\n};\n\nconst checkingPullRequestView = () => {\n  return `<div>\n    <p>Checking pull request...</p>\n  </div>`;\n};\n\nconst pausedView = () => {\n  return `<div>\n    <p>Land builds are currently paused:</p>\n    <p id=\"pausedReason\"></p>\n    <p>Please try again later.</p>\n  </div>`;\n};\nconst willLandWhenAbleView = () => {\n  return `<div>\n    <p>Excellent!</p>\n    <p>Your pull request has been queued to land once it is able</p>\n  </div>`;\n};\n// TODO: There are more detailed messages we could give here now\nconst notAllowedToLand = (reasons: {\n  isOpen?: boolean;\n  isApproved?: boolean;\n  isGreen?: boolean;\n  allTasksClosed?: boolean;\n}) => {\n  const isOpen = reasons.isOpen;\n  const isApproved = reasons.isApproved;\n  const isGreen = reasons.isGreen;\n  const allTasksClosed = reasons.allTasksClosed;\n\n  if (!isOpen) {\n    return `<div><p>PR is already closed!</p></div>`;\n  }\n  if (!isApproved) {\n    return `<div><p>Pull request needs to be approved</p></div>`;\n  }\n  if (!isGreen) {\n    return `<div><p>Pull Request needs a green build</p></div>`;\n  }\n  if (!allTasksClosed) {\n    return `<div><p>Pull Request needs all tasks completed (you might need to open and re-close them!)</p></div>`;\n  }\n  console.error(reasons);\n  return `<div>\n    <p>Error finding reason, please check console</p>\n  </div>`;\n};\n\nconst errorCreatingLandRequestView = (err: { reason?: string }) => {\n  console.error(err);\n  const reason = err.reason || \"We honestly don't know... See error console\";\n  return `<div>\n    <p>There was an error whilst queueing your land request:</p>\n    <p style=\"color: red\">${reason}</p>\n  </div>`;\n};\n\nfunction getCurrentStateAndSettings() {\n  return fetch(`${endpoint}/api/current-state`)\n    .then(resp => resp.json())\n    .then(state =>\n      fetch(`${endpoint}/api/settings`)\n        .then(resp => resp.json())\n        .then(settings => ({\n          settings,\n          state,\n        })),\n    )\n    .catch(err => console.error('error ', err));\n}\n\n// Fetches the user, repo and id vars\nfunction getQueryStringVars() {\n  const qs = window.location.search.substring(1);\n  return queryString.parse(qs);\n}\n\nfunction wantToMergeClicked() {\n  setView(checkingPullRequestView());\n\n  const qs = getQueryStringVars();\n  fetch(`${endpoint}/api/is-allowed-to-land/${qs.pullRequestId}`)\n    .then(resp => resp.json())\n    .then(data => {\n      if (data.isAllowedToLand.isAllowed) {\n        return landPullRequest();\n      } else {\n        setView(notAllowedToLand(data.isAllowedToLand));\n      }\n    })\n    .catch(err => {\n      setView(errorCreatingLandRequestView(err));\n    });\n}\n\nfunction landWhenAbleClicked() {\n  setView(checkingPullRequestView());\n  landPullRequest({\n    whenAbleFlag: true,\n  });\n}\n// reusing this function for actual landrequests and for land when able requests\n// THIS IS TERRIBLE - FIX ASAP\nfunction landPullRequest(opts: { whenAbleFlag?: boolean } = {}) {\n  const whenAbleFlag = opts.whenAbleFlag;\n  const qs = getQueryStringVars();\n\n  const qsString = queryString.stringify({\n    username: qs.username,\n    userUuid: qs.userUuid,\n    commit: qs.commit,\n    title: qs.title,\n  });\n\n  const endPointVerb = whenAbleFlag ? 'land-when-able' : 'land-pr';\n\n  // TODO: send actual post data, not a query string...\n  return fetch(\n    `${endpoint}/api/${endPointVerb}/${qs.pullRequestId}?${qsString}`,\n    {\n      method: 'POST',\n    },\n  )\n    .then(resp => resp.json())\n    .then(() => {\n      if (whenAbleFlag) {\n        setView(willLandWhenAbleView());\n        return;\n      }\n      setView(isQueuedView());\n    })\n    .catch(err => {\n      setView(errorCreatingLandRequestView(err));\n    });\n}\n\nfunction cancelButtonClicked() {\n  setView(cancellingView());\n\n  const qs = getQueryStringVars();\n  const qsString = queryString.stringify({\n    username: qs.username,\n    userUuid: qs.userUuid,\n  });\n\n  return fetch(`${endpoint}/api/cancel-pr/${qs.pullRequestId}?${qsString}`, {\n    method: 'POST',\n  })\n    .then(() => getCurrentStateAndSettings())\n    .then(stateAndSettings => {\n      if (!stateAndSettings) throw new Error('Failed to fetch settings');\n      setView(landButtonView(stateAndSettings.settings));\n    })\n    .catch(err => {\n      setView(errorCreatingLandRequestView(err));\n    });\n}\n\nfunction displayQueueOrLandButton(\n  queue: Array<LandRequest>,\n  running: LandRequest,\n  settings: LandSettings,\n) {\n  const queryStringVars = getQueryStringVars();\n  const pullRequestId = queryStringVars.pullRequestId;\n  const isQueuedOrRunning =\n    queue.some(pr => pr.pullRequestId === pullRequestId) ||\n    running.pullRequestId === pullRequestId;\n\n  console.log('Current queue: ', queue);\n\n  if (isQueuedOrRunning) {\n    setView(isQueuedView());\n  } else {\n    setView(landButtonView(settings));\n  }\n}\n\nconst qs = getQueryStringVars();\nif (qs.state === 'OPEN') {\n  getCurrentStateAndSettings().then(resp => {\n    if (!resp) return;\n\n    const { settings, state } = resp;\n    const allowedToMerge = settings.usersAllowedToMerge;\n    const paused = state.paused;\n    const pausedReason =\n      state.pausedReason || 'Builds have been paused manually';\n    if (paused) {\n      setView(pausedView());\n      // this is a bit messy, but we don't want to render \"user\" generated content as DOM, so we\n      // have to separately render the text content for the reason\n      document.querySelector('#pausedReason')!.textContent = pausedReason;\n    } else if (allowedToMerge.indexOf(qs.username) > -1) {\n      displayQueueOrLandButton(state.queue, state.running, settings);\n    }\n  });\n} else {\n  setView(\n    notAllowedToLand({\n      isOpen: false,\n    }),\n  );\n}\n\n// Wrapper function so that all the other HTML can all be wraped in this\nfunction setView(innerHtml: string) {\n  document.body.innerHTML = `<div class=\"releaseQueueView\">\n    ${innerHtml}\n  </div>`;\n}\n\n// I've had to just add this hack as the functions declared here aren't available globally anymore\n// I havent added the rest of the events since we're about to replace it, just FYI\nwindow.wantToMergeClicked = wantToMergeClicked;\nwindow.landWhenAbleClicked = landWhenAbleClicked;\nwindow.cancelButtonClicked = cancelButtonClicked;\n"]}]}